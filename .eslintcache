[{"C:\\ElevenFiftyProjects\\Red Badge\\workoutbuddyclient\\src\\index.tsx":"1","C:\\ElevenFiftyProjects\\Red Badge\\workoutbuddyclient\\src\\reportWebVitals.ts":"2","C:\\ElevenFiftyProjects\\Red Badge\\workoutbuddyclient\\src\\App.tsx":"3","C:\\ElevenFiftyProjects\\Red Badge\\workoutbuddyclient\\src\\components\\Auth\\Auth.tsx":"4","C:\\ElevenFiftyProjects\\Red Badge\\workoutbuddyclient\\src\\components\\All Routines\\Favorites.tsx":"5","C:\\ElevenFiftyProjects\\Red Badge\\workoutbuddyclient\\src\\components\\Navbar\\Navbar.tsx":"6","C:\\ElevenFiftyProjects\\Red Badge\\workoutbuddyclient\\src\\components\\Logout\\Logout.tsx":"7","C:\\ElevenFiftyProjects\\Red Badge\\workoutbuddyclient\\src\\components\\All Routines\\RoutineMap.tsx":"8","C:\\ElevenFiftyProjects\\Red Badge\\workoutbuddyclient\\src\\components\\All Routines\\RoutineIndex.tsx":"9","C:\\ElevenFiftyProjects\\Red Badge\\workoutbuddyclient\\src\\components\\All Routines\\RoutineEdit.tsx":"10","C:\\ElevenFiftyProjects\\Red Badge\\workoutbuddyclient\\src\\components\\All Routines\\CreateRoutine.tsx":"11","C:\\ElevenFiftyProjects\\Red Badge\\workoutbuddyclient\\src\\components\\All Routines\\Routines.tsx":"12"},{"size":584,"mtime":1611088579870,"results":"13","hashOfConfig":"14"},{"size":425,"mtime":499162500000,"results":"15","hashOfConfig":"14"},{"size":1876,"mtime":1611189939892,"results":"16","hashOfConfig":"14"},{"size":5685,"mtime":1611189483527,"results":"17","hashOfConfig":"14"},{"size":3759,"mtime":1611188180019,"results":"18","hashOfConfig":"14"},{"size":931,"mtime":1611189950383,"results":"19","hashOfConfig":"14"},{"size":541,"mtime":1611189961128,"results":"20","hashOfConfig":"14"},{"size":1163,"mtime":1611104919648,"results":"21","hashOfConfig":"14"},{"size":4108,"mtime":1611105243510,"results":"22","hashOfConfig":"14"},{"size":5070,"mtime":1611184061778,"results":"23","hashOfConfig":"14"},{"size":4885,"mtime":1611188601697,"results":"24","hashOfConfig":"14"},{"size":1688,"mtime":1611104604285,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1lhdj3z",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\ElevenFiftyProjects\\Red Badge\\workoutbuddyclient\\src\\index.tsx",[],["53","54"],"C:\\ElevenFiftyProjects\\Red Badge\\workoutbuddyclient\\src\\reportWebVitals.ts",[],"C:\\ElevenFiftyProjects\\Red Badge\\workoutbuddyclient\\src\\App.tsx",[],"C:\\ElevenFiftyProjects\\Red Badge\\workoutbuddyclient\\src\\components\\Auth\\Auth.tsx",[],"C:\\ElevenFiftyProjects\\Red Badge\\workoutbuddyclient\\src\\components\\All Routines\\Favorites.tsx",["55"],"import { Component } from 'react'; \r\nimport {Button, Modal, ModalHeader, ModalFooter, ModalBody, Form, FormGroup, Label, Input } from 'reactstrap'; \r\nimport '../All Routines/Favorites.css'; \r\n\r\ntype FavoritesState = {\r\n    comment: string, \r\n    modal: boolean\r\n}\r\n\r\ntype FavoritesProps = { \r\n    currentUser: () => void, \r\n    sessionToken: any, \r\n    wb: any, \r\n    isCurrentUser: boolean, \r\n    routineId: number, \r\n    getRoutines: () => void\r\n}\r\n\r\nclass Favorites extends Component <FavoritesProps , FavoritesState> {\r\n\r\n    constructor(props: FavoritesProps) {\r\n        super(props) \r\n        this.state = {\r\n            comment: '', \r\n            modal: false\r\n        }\r\n    }\r\n\r\n    resetComment = () => {\r\n        this.toggle(); \r\n        this.setState(state => ({comment: ''}))\r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({ modal: !this.state.modal})\r\n    }\r\n\r\n    comment = async () => {\r\n        const url = `http://localhost:3000/favorite/comment/${this.props.routineId}`\r\n        const body = {\r\n            comment: this.state.comment, \r\n            userId: this.props.currentUser\r\n        }\r\n        await fetch(url, {\r\n            method: 'POST', \r\n            headers: {\r\n                'Authorization': this.props.sessionToken, // localStorage.getItem('token') || ' ', the or operator helps with typescript readability \r\n                'Content-Type': 'application/json'\r\n            }, \r\n            body: JSON.stringify(body)\r\n        })\r\n        .then(r => r.json())\r\n        .then(rObj => {\r\n            console.log(rObj)\r\n            this.toggle()\r\n            this.props.getRoutines()\r\n        }) \r\n    }\r\n\r\n\r\n    render () {\r\n        return (\r\n            <div>\r\n                { !this.props.isCurrentUser ? \r\n                    <>\r\n                        <Button type=\"button\" id=\"commentButton\" onClick={this.toggle}>\r\n                           Comment   \r\n                        </Button> \r\n                    </> : null\r\n                }\r\n                <Modal isOpen={this.state.modal}>\r\n                    <ModalHeader>\r\n                        <h1  id=\"commentHeader\">\r\n                            What do you like about this Routine?\r\n                        </h1>\r\n                    </ModalHeader>\r\n                    <Form>\r\n                        <ModalBody>\r\n                            <FormGroup>\r\n                                <br />\r\n                                {/* <Label id=\"labelComment\" htmlFor=\"comment\"> Comment </Label> */}\r\n                                <Input id=\"inputField\" placeholder=\"Comment\" value={this.state.comment} onChange={e => this.setState({comment: e.target.value})}/>\r\n                            </FormGroup>\r\n                        </ModalBody>\r\n                    </Form>\r\n                    <ModalFooter>\r\n                        <Button type=\"button\" id=\"cancelButton\" onClick={this.resetComment}> Cancel </Button>\r\n                        <Button type=\"button\" id=\"submitButton\" onClick={this.comment}> Submit </Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n                {this.props.wb.favorites.map((comment: any, i: any) => {\r\n                    return (\r\n                     <div id=\"commentMap\">  \r\n                        {comment.comment} \r\n                        {/* {comment.from}'s {comment.comment} will show the other users username for their comment on other routines*/} \r\n                        {comment.from}'s {comment.comment}\r\n                     </div>\r\n                    )\r\n                })}\r\n                        {/* give the parent div a fixed max height and overflow y auto will give it a scrollable box feature  */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Favorites; ","C:\\ElevenFiftyProjects\\Red Badge\\workoutbuddyclient\\src\\components\\Navbar\\Navbar.tsx",[],"C:\\ElevenFiftyProjects\\Red Badge\\workoutbuddyclient\\src\\components\\Logout\\Logout.tsx",[],"C:\\ElevenFiftyProjects\\Red Badge\\workoutbuddyclient\\src\\components\\All Routines\\RoutineMap.tsx",[],"C:\\ElevenFiftyProjects\\Red Badge\\workoutbuddyclient\\src\\components\\All Routines\\RoutineIndex.tsx",["56"],"import {Component } from 'react'; \r\nimport {Card, CardTitle, CardBody, Button, Modal, Container, Row } from 'reactstrap'; \r\nimport RoutineEdit from '../All Routines/RoutineEdit'; \r\nimport '../All Routines/RoutineIndex.css'; \r\nimport Favorites from '../All Routines/Favorites'; \r\n\r\ntype RoutineIndexProps = {\r\n    currentUser: () => void, \r\n    wb: any, \r\n    getRoutines: () => void, \r\n    sessionToken: any\r\n}\r\n\r\ntype RoutineIndexState = {\r\n    modal: boolean, \r\n    isCurrentUser: boolean, \r\n    routineId: number\r\n}\r\n\r\nclass RoutineIndex extends Component <RoutineIndexProps, RoutineIndexState>{\r\n\r\n    constructor(props: RoutineIndexProps) {\r\n        super(props) \r\n        this.state = {\r\n            modal: false, \r\n            isCurrentUser: false, \r\n            routineId: 0\r\n        }\r\n    }\r\n\r\n    componentDidMount () {\r\n        this.userCurrent() \r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({modal: !this.state.modal})\r\n    }\r\n\r\n    deleteRoutine = async () => {\r\n        const url = `http://localhost:3000/routine/delete/${this.props.wb.id}`\r\n        await fetch (url, {\r\n            method: 'DELETE', \r\n            headers: {\r\n                'Authorization': this.props.sessionToken\r\n            }\r\n        })       \r\n        .then(r => r.json())\r\n        .then(rObj => console.log(rObj))\r\n        this.props.getRoutines()\r\n    }\r\n    \r\n    userCurrent = () => {\r\n        if (this.props.wb.userId == localStorage.getItem('userId')) {\r\n            this.setState({isCurrentUser: true}) \r\n        } else {\r\n            this.setState({isCurrentUser: false})\r\n        }\r\n    }\r\n\r\n\r\n    render () {\r\n            return (\r\n            <Container className=\"routineContainer\" onMouseOver={() => {\r\n                this.setState({routineId: this.props.wb.id})\r\n                console.log(this.state.routineId)\r\n            }}>\r\n                <Row className=\"cardRow\">\r\n                    <Card className=\"routineCard\" >\r\n                        <CardTitle>\r\n                            {/* {!this.state.isCurrentUser ? \r\n                                <> 'Users' Routine' </>: \r\n                                'Your Routine' \r\n                            }            */}\r\n                        </CardTitle>\r\n                        <CardBody className=\"cardBody\">\r\n                            <p className=\"exercise\"> {this.props.wb.exercise} </p>\r\n                            <p className=\"equipment\"> Equipment : {this.props.wb.equipment} </p>\r\n                            <p className=\"weight\"> Weight : {this.props.wb.weight} lbs </p> \r\n                            <p className=\"sets\"> {this.props.wb.sets} sets </p> \r\n                            <p className=\"reps\"> {this.props.wb.reps} reps </p>\r\n                            <p className=\"duration\"> {this.props.wb.duration} minute routine </p>\r\n                                <Favorites wb={this.props.wb} isCurrentUser={this.state.isCurrentUser} currentUser={this.props.currentUser} sessionToken={this.props.sessionToken} routineId={this.state.routineId} getRoutines={this.props.getRoutines}/> \r\n                        </CardBody>\r\n                        <Modal isOpen={this.state.modal} >\r\n                            <RoutineEdit toggle={this.toggle} sessionToken={this.props.sessionToken} wb={this.props.wb} getRoutines={this.props.getRoutines} currentUser={this.props.currentUser}/> \r\n                        </Modal>\r\n                    </Card>\r\n                </Row>\r\n                <Row className=\"buttonRow\">\r\n                    { this.state.isCurrentUser ? \r\n                        <>\r\n                        <Button type=\"button\" className=\"deleteroutineButton\" onClick={this.deleteRoutine}> Delete Routine </Button>\r\n                        <Button type=\"button\" className=\"editroutineButton\" onClick={this.toggle}> Edit Routine </Button>\r\n                        </> : null // added the empty html tags within the ternary b/c it will only return one thing within the ternary \r\n                    }\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RoutineIndex; ","C:\\ElevenFiftyProjects\\Red Badge\\workoutbuddyclient\\src\\components\\All Routines\\RoutineEdit.tsx",[],"C:\\ElevenFiftyProjects\\Red Badge\\workoutbuddyclient\\src\\components\\All Routines\\CreateRoutine.tsx",[],"C:\\ElevenFiftyProjects\\Red Badge\\workoutbuddyclient\\src\\components\\All Routines\\Routines.tsx",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":2,"column":78,"nodeType":"63","messageId":"64","endLine":2,"endColumn":83},{"ruleId":"65","severity":1,"message":"66","line":53,"column":34,"nodeType":"67","messageId":"68","endLine":53,"endColumn":36},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"@typescript-eslint/no-unused-vars","'Label' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]